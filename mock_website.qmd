---
title: "Program to Assist Developers"
Subtitle: "Affordable Housing Tax Credit Map and Calculator"
author: Daniel Nickas
format: html
---

## Affordable Housing Tax Credit Calculator

#### Welcome to a mock up just to see if this actually runs. More to come soon!



### Enter Coordinates to Place a Marker:


#### Georgia Map
<form id="coord-form">
  <label>Latitude:
    <input id="lat" type="number" value="33.7501" step="0.0001" required>
  </label>
  <label>Longitude:
    <input id="lon" type="number" value="-84.3885" step="0.0001" required>
  </label>
  <button type="submit">Place Marker</button>
</form>

<div id="map" style="height: 500px; margin-top: 20px; border: 1px solid #aaa;"></div>

<!-- Load Leaflet (CSS + JS) -->
<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
/>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script src="https://d3js.org/d3.v7.min.js"></script>

<script>
// Wrap in window load to ensure elements are ready
window.addEventListener('load', () => {
  // Initialize the map
  const map = L.map('map').setView([33.7501, -84.3885], 11);

  // Add Esri/ArcGIS basemap
  L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/' +
              'World_Imagery/MapServer/tile/{z}/{y}/{x}', {
    attribution: 'Tiles © Esri',
    maxZoom: 18
  }).addTo(map);

  function getColor(score) {
    const maxScore = 20;
    const midScore = maxScore / 2;

    let r, g;

    if (score <= midScore) {
      const ratio = score / midScore;
      r = Math.round(255 * ratio);
      g = 255;
    } else {
      const ratio = (score - midScore) / midScore;
      r = 255;
      g = Math.round(255 * (1 - ratio));
    }

    return `rgb(${r},${g},0)`;
  }

  const squareSize = 0.01;

  d3.csv("data/desirable_undesirable_activities/desirable_undesirable_scores.csv").then(data => {
    data.forEach(d => {
      const lat = parseFloat(d.lat);
      const lon = parseFloat(d.lon);
      const score = parseFloat(d.final_score);

      if (!isNaN(lat) && !isNaN(lon) && !isNaN(score)) {
        const bounds = [
          [lat - squareSize, lon - squareSize], // Southwest corner
          [lat + squareSize, lon + squareSize]  // Northeast corner
        ];

        L.rectangle(bounds, {
          stroke: false,                // No border
          fillColor: getColor(score),   // Your gradient fill function
          fillOpacity: 0.3,
          weight: 0
        }).addTo(map).bindPopup(`Score: ${score}`);
      }
    });
  });

  // Manual Marker for Input
  let userMarker = null;
  document.getElementById('coord-form').addEventListener('submit', function(e) {
    e.preventDefault();
    const lat = parseFloat(document.getElementById('lat').value);
    const lon = parseFloat(document.getElementById('lon').value);

    if (!isNaN(lat) && !isNaN(lon)) {
      if (userMarker) map.removeLayer(userMarker);
      userMarker = L.marker([lat, lon]).addTo(map)
        .bindPopup(`Latitude: ${lat.toFixed(4)}<br>Longitude: ${lon.toFixed(4)}`)
        .openPopup();
      map.setView([lat, lon], 8);
    }
  });
});
</script>

::: {.column width="50%" style="padding-left: 20px;"}
### Locality-Specific Criteria

<form id="criteria-form">
  <label><input type="checkbox" value="20" onclick="updateTotal()" checked>
    Desirable/Undesirable Activities (±20)</label><br>

  <label><input type="checkbox" value="6" onclick="updateTotal()" checked>
    Community Transportation Options (max 6)</label><br>

  <label><input type="checkbox" value="3" onclick="updateTotal()" checked>
    Quality Education Areas (max 3)</label><br>

  <label><input type="checkbox" value="10" onclick="updateTotal()" checked>
    Stable Communities (max 10)</label><br>

  <label><input type="checkbox" value="10" onclick="updateTotal()" checked>
    Housing Needs Characteristics (max 10)</label><br>
</form>

<br>

<p><strong>Total Score:</strong> <span id="score">26</span></p>

<script>
  function updateTotal() {
    const form = document.getElementById('criteria-form');
    const checkboxes = form.querySelectorAll('input[type="checkbox"]');
    let total = 0;
    checkboxes.forEach(box => {
      if (box.checked) {
        total += parseInt(box.value);
      }
    });
    document.getElementById('score').textContent = total;
  }

  // Run on page load
  updateTotal();
</script>
:::



